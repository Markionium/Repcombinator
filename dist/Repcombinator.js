'use strict';function _toConsumableArray(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}return Array.from(a)}(function(a,b){function isString(a){return'string'==typeof a}function identity(a){return a}function RepcombinatorRenderer(a){function createNode(b,c){if(!isString(b))throw new Error('Selector for creating a node can not be empty');var d=b.split('.'),e=d.shift().split('#'),f=e.shift(),g=e.shift();if(!f)throw new Error('No tag name found');var h=a.createElement(f);return d.forEach(function(a){h.classList.add(a)}),(c||[]).filter(identity).forEach(function(b){isString(b)?h.appendChild(a.createTextNode(b)):h.appendChild(b)}),h}function renderHeader(a){var b=a.order.map(function(b){return createNode('th.report__header__name',[a.headers[b].name])});return createNode('thead',[createNode('tr.report__header',b)])}function renderBody(a){var b=a.rows.map(function(b){var c=a.order.map(function(a){return createNode('td.report__row__cell',[b[a]])});return createNode('tr.report__row',c)});return createNode('tbody',b)}function renderReport(a){return createNode('table.report',[renderHeader(a),renderBody(a)])}function rendererForCombinedReportInto(a){return function render(b){a.appendChild(renderReport(b))}}function Renderer(a){return{render:rendererForCombinedReportInto(a)}}return{into:function into(b){var c=a.querySelector(b);if(!c)throw new Error('Selector '+b.toString()+' does not match any elements');return Renderer(c)}}}function Repcombinator(a){function nInList(a){return function(b){return b&&b[a]}}function map(a,b){return e(b)?b.map(a):function(b){return map(a,b)}}function isEqual(a,b){return b?a===b:function(b){return isEqual(a,b)}}function getObjectEntries(a){return Object.keys(a).map(function(b){return[b,a[b]]})}function compose(){function callWithResult(a,b){return[b.apply(void 0,_toConsumableArray(a))]}var a=Array.prototype.slice.call(arguments);return function(){var b=Array.prototype.slice.call(arguments);return a.reverse().reduce(callWithResult,b)}}function removeEmptyColumns(a,b){function indexNotIn(a){return function(b,c){return isEqual(a.indexOf(c),-1)}}return a.headers=a.headers&&a.headers.filter(indexNotIn(b)),a.rows=map(function(a){return a.filter(indexNotIn(b))})(a.rows||[]),a}function keepNonEmptyColumns(a){var b=getEmptyColumns(a.rows);return removeEmptyColumns(a,b)}function getEmptyColumns(a){var b=a.map(function(a){return(a||[]).reduce(function(a,b,c){return b?a:a.concat(c)},[])}).reduce(function(a,b){return b.forEach(function(b){a[b]?a[b]+=1:a[b]=1}),a},{});return getObjectEntries(b).filter(compose(isEqual(a.length),g)).map(f).map(function(a){return parseInt(a,10)})}function createObjectRowsForReport(a){var b=a.headers||{},c={};return Object.keys(a).filter(function(a){return!['rows','columns'].includes(a)}).forEach(function(b){c[b]=a[b]}),c.headersMap||(c.headerOrder=b.map(function(a){return a.column}),c.headersMap=b.reduce(function(a,b){return a[b.column]=b,a},{})),c.objectRows=(a.rows||[]).map(function(a){var c={};return a.filter(identity).forEach(function(a,d){b[d]&&(c[b[d].column]=a)}),c}),c}function combineObjectReports(a){return a.reduce(function(a,b){return a.rows=a.rows.concat(b.objectRows),a.order=a.order.concat((b.headerOrder||[]).filter(function(b){return!a.order.includes(b)})),Object.keys(b.headersMap).forEach(function(c){a.headers[c]=b.headersMap[c]}),a},{rows:[],headers:{},order:[]})}function getObjectBasedReport(a){return createObjectRowsForReport(keepNonEmptyColumns(a))}function combineTableResults(a){return combineObjectReports(a.map(getObjectBasedReport))}function isValidUid(a){return /[A-z]{1}[A-z0-9]{10}/.test(a)}function isResponseOk(a){return a&&a.ok?Promise.resolve(a):Promise.reject(new Error('Report could not be loaded'))}function extractResponseBody(a){return a.json()}function requestReport(a){if(!isValidUid(a))return Promise.reject(new Error('A valid uid should be provided to requestReport, got ('+a+')'));return fetch(c+'/reportTables/'+a+'/data',{headers:d,redirect:'error',credentials:'include'}).then(isResponseOk).then(extractResponseBody)}function requestReports(a){return e(a)?Promise.all(map(requestReport,a)):Promise.reject(new Error('Parameter to requestReports should be an array of uids'))}var c=a&&a.apiUrl||'../api/',d=function assign(a){var b=Array.prototype.slice.call(arguments);return b.filter(identity).forEach(function(b){Object.keys(b).forEach(function(c){a[c]=b[c]})}),a}({"content-type":'application/json'},a&&a.headers),e=Array.isArray,f=nInList(0),g=nInList(1);return{combineTableResults:combineTableResults,getObjectBasedReport:getObjectBasedReport,requestReports:requestReports,requestReport:requestReport,getCombinedReportForReportUids:function getCombinedReportForReportUids(a){return requestReports(a).then(combineTableResults)},renderer:RepcombinatorRenderer(b,a&&a.render)}}a?window.Repcombinator=Repcombinator:module.exports=Repcombinator})('undefined'==typeof module,document);
